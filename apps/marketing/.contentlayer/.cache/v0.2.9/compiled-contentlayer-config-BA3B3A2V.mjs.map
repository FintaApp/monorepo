{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport readingTime from 'reading-time';\n\nconst computedFields = {\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '')\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  wordCount: {\n    type: 'number',\n    resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n  }\n}\n\nconst integrationField = {\n  type: 'enum',\n  options: ['airtable', 'coda', 'google', 'notion', 'none' ]\n}\n\nconst categoryField = {\n  type: 'enum',\n  options: [ 'company', 'how-to' ],\n  required: true\n}\n\nconst Integration = defineDocumentType(() => ({\n  name: 'Integration',\n  filePathPattern: 'integrations/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    logo: { type: 'string', required: true },\n    id: integrationField,\n    description: { type: 'string', required: true },\n    companyUrl: { type: 'string', required: true },\n  },\n  computedFields\n}))\n\nconst BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: 'posts/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    category: categoryField,\n    integration: integrationField,\n    hasGenericPost: { type: 'boolean', required: true },\n    cta: { type: 'string', required: true }\n  },\n  computedFields\n}))\n\nconst Documentation = defineDocumentType(() => ({\n  name: \"Documentation\",\n  filePathPattern: 'docs/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    description: { type: 'string', required: true }\n  },\n  computedFields\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [ Integration, BlogPost, Documentation ],\n});"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AAExB,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,EAChE;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AAAA,EACA,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,EACzE,WAAW;AAAA,IACT,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,EAChD;AACF;AAEA,IAAM,mBAAmB;AAAA,EACvB,MAAM;AAAA,EACN,SAAS,CAAC,YAAY,QAAQ,UAAU,UAAU,MAAO;AAC3D;AAEA,IAAM,gBAAgB;AAAA,EACpB,MAAM;AAAA,EACN,SAAS,CAAE,WAAW,QAAS;AAAA,EAC/B,UAAU;AACZ;AAEA,IAAM,cAAc,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,IAAI;AAAA,IACJ,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,YAAY,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC/C;AAAA,EACA;AACF,EAAE;AAEF,IAAM,WAAW,mBAAmB,OAAO;AAAA,EACzC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,UAAU;AAAA,IACV,aAAa;AAAA,IACb,gBAAgB,EAAE,MAAM,WAAW,UAAU,KAAK;AAAA,IAClD,KAAK,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EACxC;AAAA,EACA;AACF,EAAE;AAEF,IAAM,gBAAgB,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAChD;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAE,aAAa,UAAU,aAAc;AACxD,CAAC;",
  "names": []
}
