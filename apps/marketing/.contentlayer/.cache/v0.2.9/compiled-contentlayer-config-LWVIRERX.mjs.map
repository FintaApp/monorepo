{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files';\nimport readingTime from 'reading-time';\n\nconst integrationField = {\n  type: 'enum',\n  options: ['airtable', 'coda', 'google', 'notion' ]\n}\n\nconst categoryField = {\n  type: 'enum',\n  options: [ 'company' ],\n  required: true\n}\n\nconst Integration = defineDocumentType(() => ({\n  name: 'Integration',\n  filePathPattern: 'integrations/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    logo: { type: 'string', required: true },\n    id: integrationField\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, '')\n    }\n  }\n}))\n\nconst BlogPost = defineDocumentType(() => ({\n  name: 'BlogPost',\n  filePathPattern: 'posts/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    publishedAt: { type: 'string', required: true },\n    image: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    seoDescription: { type: 'string', required: true },\n    category: categoryField,\n    integrations: { type: 'list', of: integrationField }\n  },\n  computedFields: {\n    readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n    wordCount: {\n      type: 'number',\n      resolve: (doc) => doc.body.raw.split(/\\s+/gu).length,\n    },\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, ''),\n    },\n  }\n}))\n\nconst Documentation = defineDocumentType(() => ({\n  name: \"Documentation\",\n  filePathPattern: 'docs/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true }\n  }\n}))\n\nconst contentLayerConfig = makeSource({\n  contentDirPath: 'data',\n  documentTypes: [ Integration, BlogPost, Documentation ],\n});"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,iBAAiB;AAExB,IAAM,mBAAmB;AAAA,EACvB,MAAM;AAAA,EACN,SAAS,CAAC,YAAY,QAAQ,UAAU,QAAS;AACnD;AAEA,IAAM,gBAAgB;AAAA,EACpB,MAAM;AAAA,EACN,SAAS,CAAE,SAAU;AAAA,EACrB,UAAU;AACZ;AAEA,IAAM,cAAc,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,IAAI;AAAA,EACN;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAChE;AAAA,EACF;AACF,EAAE;AAEF,IAAM,WAAW,mBAAmB,OAAO;AAAA,EACzC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,gBAAgB,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACjD,UAAU;AAAA,IACV,cAAc,EAAE,MAAM,QAAQ,IAAI,iBAAiB;AAAA,EACrD;AAAA,EACA,gBAAgB;AAAA,IACd,aAAa,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG,EAAE;AAAA,IACzE,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,IAAI,MAAM,OAAO,EAAE;AAAA,IAChD;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,eAAe,QAAQ,UAAU,EAAE;AAAA,IAChE;AAAA,EACF;AACF,EAAE;AAEF,IAAM,gBAAgB,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,EAC1C;AACF,EAAE;AAEF,IAAM,qBAAqB,WAAW;AAAA,EACpC,gBAAgB;AAAA,EAChB,eAAe,CAAE,aAAa,UAAU,aAAc;AACxD,CAAC;",
  "names": []
}
