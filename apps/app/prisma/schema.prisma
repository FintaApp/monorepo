// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                  String      @id @default(uuid())
  userId              String      @map("user_id")
  type                String
  provider            String
  providerAccountId   String      @map("provider_account_id")
  refresh_token       String?     @db.Text
  access_token        String?     @db.Text 
  expires_at          DateTime?   
  token_type          String?     
  scope               String
  id_token            String?     @db.Text
  session_state       String?     

  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_accounts")
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id                          String      @id @default(uuid())
  sessionToken                String      @unique @map("session_token")
  userId                      String      @map("user_id")
  expires                     DateTime    @map("expires_at")

  user                        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_sessions") 
  @@index([userId])
}

model User {
  id                          String      @id @default(uuid())
  name                        String?
  email                       String?     @unique
  emailVerified               DateTime?   @map("email_verified_at")
  passwordHash                String?     @map("password_hash")
  createdAt                   DateTime    @default(now()) @map("created_at")
  updatedAt                   DateTime    @updatedAt @map("updated_at")
  image                       String?     @map("image_url")
  disabledAt                  DateTime?   @map("disabled_at")  
  timezone                    String      @default("America/New_York")
  stripeCustomerId            String      @map("stripe_customer_id")
  isSubscribedGeneral         Boolean     @default(true) @map("is_subscribed_general")
  isSubscribedPeriodicUpdates Boolean     @default(true) @map("is_subscribed_periodic_updates")
  periodicUpdatesFrequency    Frequency   @default(Weekly) @map("periodic_updates_frequency")
  periodicUpdatesJobId        String?     @map("periodic_updates_job_id")

  accounts          Account[]
  sessions          Session[]
  linkToken         LinkToken?

  @@map("users")
}

model VerificationToken {
  identifier                  String
  token                       String      @unique
  expires                     DateTime    @map("expires_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model LinkToken {
  id                          String      @id @default(uuid())
  token                       String      @unique
  userId                      String      @map("user_id") @unique
  user                        User        @relation(fields: [userId], references: [id], onDelete: Cascade )
  @@map("link_tokens")
  @@index([userId])
}

model StripeWebhookEvent {
  id                          String                      @id
  event                       String
  state                       StripeWebhookEventState     @default(Processed)
  createdAt                   DateTime                    @map("created_at") @default(now())

  @@map("stripe_webhook_events")
}

enum Frequency {
  Daily      @map("daily")
  Weekly     @map("weekly")
  Monthly    @map("monthly")
  Quarterly  @map("quarterly")
  Yearly     @map("yearly")

  @@map("frequencies_enum")
}

enum StripeWebhookEventState {
  Processed   @map("processed")
  Failed      @map("failed")

  @@map("stripe_webhook_event_states_enum")
}