fragment DBUserFields on users {
  id
  display_name: displayName
  metadata
  disabled
  created_at: createdAt
  password_hash: passwordHash
  email
}

fragment AllBaseUserFields on users {
  __typename
  id
  email
  displayName
  metadata
  disabled
  createdAt
}

query GetBaseUser($userId: uuid!) {
  user(id: $userId) {
    ...AllBaseUserFields
  }
}

fragment AllBackendUserFields on users {
  __typename
  id
  email
  displayName
  metadata
  disabled
  createdAt
  profile {
    stripeData {
      hasAppAccess
      trialEndsAt
      customer {
        id
        createdAt
      }
      subscription {
        id
        status
        cancelAtPeriodEnd
        trialStartedAt
        trialEndedAt
        startedAt
        endedAt
        currentPeriodStart
        currentPeriodEnd
        interval
        canceledAt
      }
    }
  }
}

query GetUserFromToken {
  users {
    id
    displayName
    email
    createdAt
  }
}

query GetUser($userId: uuid!) {
  user(id: $userId) {
    ...AllBackendUserFields
  }
}

mutation UpdateUser($userId: uuid!, $_set: users_set_input = {}, $_append: users_append_input = {}, $_delete_key: users_delete_key_input = {}) {
  updateUser(pk_columns: {id: $userId}, _set: $_set, _append: $_append, _delete_key: $_delete_key) {
    ...AllBackendUserFields
  }
}



fragment AllFrontendUserFields on users {
  __typename
  id
  displayName,
  email,
  createdAt
  profile {
    stripeCustomerId
    timezone
    isSubscribedGeneral
    isSubscribedSyncUpdates
    syncUpdatesFrequency
  }
  metadata
}

mutation UpdateUserFrontend($id: uuid!, $_set: users_set_input = {}, $_delete_key: users_delete_key_input = {}) {
  user: updateUser(pk_columns: {id: $id}, _set: $_set, _delete_key: $_delete_key) {
    ...AllFrontendUserFields
  }
}

fragment AllFrontendUserProfileFields on userProfiles {
  __typename
  userId
  timezone
  isSubscribedGeneral
  isSubscribedSyncUpdates
  syncUpdatesFrequency
}

query GetUserProfileFrontend($userId: uuid!) {
  userProfile(userId: $userId) {
    ...AllFrontendUserProfileFields
  }
}

query GetUserFrontend($userId: uuid!) {
  user(id: $userId) {
    ...AllFrontendUserFields
  } 
}

mutation UpdateUserProfileFrontend($userId: uuid!, $_set: userProfiles_set_input!) {
  updateUserProfile(pk_columns: { userId: $userId }, _set: $_set) {
    ...AllFrontendUserProfileFields
  }
}