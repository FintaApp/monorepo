fragment DBSyncLogFields on sync_logs {
  id
  ended_at
  error
  trigger
  is_success
}

fragment AllSyncLogFields on sync_logs {
  id
  created_at
  ended_at
  trigger
  is_success
  error,
  metadata
}

fragment AllPlaidItemSyncLogFields on plaid_item_sync_logs {
  plaid_item_id,
  sync_log_id,
  error
  accounts
  holdings
  transactions
  investment_transactions
}

fragment AllDestinationSyncLogFields on destination_sync_logs {
  destination_id
  sync_log_id
  error
  accounts
  holdings
  transactions
  investment_transactions
}

mutation InsertSyncLog($sync_log: sync_logs_insert_input!) {
  sync_log: insert_sync_logs_one(object: $sync_log) {
    ...AllSyncLogFields
  }
}

mutation UpdateSyncLog($sync_log_id: uuid!, $_set: sync_logs_set_input!) {
  sync_log: update_sync_logs_by_pk(pk_columns: { id: $sync_log_id }, _set: $_set ) {
    ...AllSyncLogFields
  }
}

mutation InsertPlaidItemSyncLogs($plaid_item_sync_logs: [plaid_item_sync_logs_insert_input!]!) {
  plaid_item_sync_logs: insert_plaid_item_sync_logs(objects: $plaid_item_sync_logs) {
    returning {
      ...AllPlaidItemSyncLogFields
    }
  }
}

mutation InsertPlaidItemSyncLog($plaid_item_sync_log: plaid_item_sync_logs_insert_input!, $update_columns: [plaid_item_sync_logs_update_column!]!) {
  plaid_item_sync_log: insert_plaid_item_sync_logs_one(
    object: $plaid_item_sync_log,
    on_conflict: {
      constraint: plaid_item_sync_logs_pkey, 
      update_columns: $update_columns
    }
  ) {
    ...AllPlaidItemSyncLogFields
  }
}

mutation InsertDestinationSyncLog($destination_sync_log: destination_sync_logs_insert_input!, $update_columns: [destination_sync_logs_update_column!]!) {
  destination_sync_log: insert_destination_sync_logs_one(
    object: $destination_sync_log,
    on_conflict: {
      constraint: destination_sync_logs_pkey, 
      update_columns: $update_columns
    }
  ) {
    ...AllDestinationSyncLogFields
  }
}

query GetSyncLog($sync_log_id: uuid!) {
  sync_log: sync_logs_by_pk(id: $sync_log_id) {
    ...AllSyncLogFields
    destination_sync_logs {
      ...AllDestinationSyncLogFields
      destination {
        integration_id
        user_id
      }
    }
    plaid_item_sync_logs {
      ...AllPlaidItemSyncLogFields 
      plaid_item {
        user_id
      }
    }
  }
}

query GetUserSyncLogs($userId: uuid!, $start: timestamptz!, $end: timestamptz!) {
  sync_logs(where: {_or: {plaid_item_sync_logs: {plaid_item: {user_id: {_eq: $userId}}}, destination_sync_logs: {destination: {user_id: {_eq: $userId}}}}, _and: {created_at: {_gte: $start}, ended_at: {_lte: $end}}}) {
    id
    is_success
    error
    ended_at
    created_at
    destination_sync_logs {
      accounts
      destination_id
      error
      holdings
      investment_transactions
      transactions
    }
    plaid_item_sync_logs {
      accounts
      error
      holdings
      investment_transactions
      transactions
    }
    metadata
    trigger
  }
}